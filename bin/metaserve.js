#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var BASE_DIR, DEFAULT_BASE_DIR, DEFAULT_COMPILERS, HOST, PORT, VERBOSE, app, argv, de_res, express, fs, isArray, isString, metaserve, url;

  fs = require('fs');

  url = require('url');

  de_res = function(n) {
    return Math.floor(n / 1000) * 1000;
  };

  isArray = function(a) {
    return Array.isArray(a);
  };

  isString = function(s) {
    return typeof s === 'string';
  };

  VERBOSE = process.env.METASERVE_VERBOSE != null;

  DEFAULT_BASE_DIR = './static';

  DEFAULT_COMPILERS = function() {
    return {
      html: require('metaserve-html-jade')(),
      js: require('metaserve-js-coffee')(),
      css: require('metaserve-css-styl')()
    };
  };

  module.exports = metaserve = function(options) {
    if (options == null) {
      options = {};
    }
    if (isString(options)) {
      options = {
        base_dir: options
      };
    }
    options.base_dir || (options.base_dir = DEFAULT_BASE_DIR);
    options.compilers || (options.compilers = DEFAULT_COMPILERS());
    return function(req, res, next) {
      var base_dir, compiler, compilers, ext, file_url, filename, filename_stem, i, len, matched, ref, ref1, url_match;
      file_url = url.parse(req.url).pathname;
      if (file_url.slice(-1)[0] === '/') {
        file_url += 'index.html';
      }
      ref = options.compilers;
      for (url_match in ref) {
        compilers = ref[url_match];
        if (!url_match.match('\/')) {
          url_match = '\/(.*)\.' + url_match;
        }
        if (!isArray(compilers)) {
          compilers = [compilers];
        }
        compilers = compilers.filter(function(c) {
          return c != null;
        });
        if (matched = file_url.match(new RegExp(url_match))) {
          for (i = 0, len = compilers.length; i < len; i++) {
            compiler = compilers[i];
            ref1 = compiler.options, base_dir = ref1.base_dir, ext = ref1.ext;
            base_dir || (base_dir = options.base_dir);
            filename_stem = matched[1];
            filename = base_dir + '/' + filename_stem + '.' + ext;
            if (fs.existsSync(filename)) {
              if (compiler.shouldCompile != null) {
                if (!compiler.shouldCompile(filename)(req, res, next)) {
                  if (VERBOSE) {
                    console.log("[metaserve] Skipping compiler for " + filename);
                  }
                  continue;
                }
              }
              if (VERBOSE) {
                console.log("[metaserve] Using compiler for " + file_url + " (" + filename + ")");
              }
              return compiler.compile(filename)(req, res, next);
            } else {
              if (VERBOSE) {
                console.log("[metaserve] File not found for " + filename);
              }
            }
          }
        }
      }
      filename = options.base_dir + file_url;
      if (fs.existsSync(filename)) {
        if (VERBOSE) {
          console.log('[normalserve] Falling back with ' + filename);
        }
        return res.sendfile(filename);
      } else {
        return next();
      }
    };
  };

  if (require.main === module) {
    express = require('express');
    argv = require('yargs').argv;
    HOST = argv.host || process.env.METASERVE_HOST || '0.0.0.0';
    PORT = argv.port || process.env.METASERVE_PORT || 8000;
    BASE_DIR = argv['base-dir'] || process.env.METASERVE_BASE_DIR || './static';
    app = express();
    app.use(metaserve({
      base_dir: BASE_DIR
    }));
    app.listen(PORT, HOST, function() {
      return console.log("Metaserving on http://" + HOST + ":" + PORT + "/");
    });
  }

}).call(this);
